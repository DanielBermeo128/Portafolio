package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;

import java.io.IOException;
import java.net.URL;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.ArrayList;
import java.util.ResourceBundle;

import db.Conexion;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.event.EventType;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ComboBox;

import javafx.scene.control.Tab;

import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.stage.Window;
import javafx.stage.WindowEvent;
import javafx.util.converter.LocalDateStringConverter;
import objs.Deudas;
import objs.Fondos;
import objs.Gastos;
import objs.Ingresos;
import objs.Saldos;
import javafx.scene.control.TableView;

import javafx.scene.control.DatePicker;

import javafx.scene.control.TableColumn;

public class IndexController implements Initializable {
	private Fondos fondoSeleccionado = null;

	@FXML
	private Tab tabGeneral;
	@FXML
	private Label lblCapitalTotal;
	@FXML
	private Label lblDeudaTotal;
	@FXML
	private Label lblEstabilidad;
	@FXML
	private TableView<Fondos> tblFondos;
	@FXML
	private TableColumn<Fondos, String> clmnNomFondo;
	@FXML
	private TableColumn<Fondos, Integer> clmnMontoDeseado;
	@FXML
	private TableColumn<Fondos, Integer> clmnCapitalAct;
	@FXML
	private Button btnCrearFondo;
	@FXML
	private Button btnDetalleFondo;
	@FXML
	private Button btnEditarFondo;
	@FXML
	private Button btnAnadirIngresoGnrl;
	@FXML
	private Button btnRegistrarGastoGnrl;
	@FXML
	private Button btnPagarDeuda;
	@FXML
	private Label lblTituloTabla;
	@FXML
	private Label lblSumatoriaIngresosNum;
	@FXML
	private Label lblTitSumatoriaIng;
	@FXML
	private TableView tblIngresos;
	@FXML
	private TableColumn clmnFechaIngreso;
	@FXML
	private TableColumn clmnMontoIngreso;
	@FXML
	private TableColumn clmConceptoIngreso;
	@FXML
	private TableColumn clmnFondoDestino;
	@FXML
	private Button btnAnadirIngreso;
	@FXML
	private Button btnFiltrarIngresos;
	@FXML
	private DatePicker dateInicioIngresos;
	@FXML
	private DatePicker dateFinalingresos;
	@FXML
	private Label lblRiruloTablaGastos;
	@FXML
	private Label lblSumatoriaGastosNum;
	@FXML
	private Label lblTitSumatoriaGts;
	@FXML
	private TableView tblGastos;
	@FXML
	private TableColumn clmFechaGasto;
	@FXML
	private TableColumn clmnMontoGasto;
	@FXML
	private TableColumn clmnConceptoGasto;
	@FXML
	private TableColumn clmnClasificacion;
	@FXML
	private TableColumn clmnFondoTomado;
	@FXML
	private Button btnRegistrarGasto;
	@FXML
	private Button btnFiltrarGastos;
	@FXML
	private DatePicker dateInicioGastos;
	@FXML
	private DatePicker dateFinGastos;
	@FXML
	private Label lblSaldoTotalAct;
	@FXML
	private TableView tblSaldosActivos;
	@FXML
	private TableColumn clmnDeuda;
	@FXML
	private TableColumn clmnFechaSaldo;
	@FXML
	private TableColumn clmnMontoPendiente;
	@FXML
	private DatePicker dateFechaBusquedaSaldo;
	@FXML
	private TableView tblBusquedaSaldos;
	@FXML
	private TableColumn clmnFechaSaldoB;
	@FXML
	private TableColumn clmnDeudaB;
	@FXML
	private TableColumn clmnFondoPago;
	@FXML
	private ComboBox<Gastos> cmbSeleccDeuda;
	@FXML
	private Button btnBuscarSaldos;
	@FXML
	private TableView tblHistoricoDeuda;
	@FXML
	private TableColumn clmConceptoDeuda;
	@FXML
	private TableColumn clmnMontoDeuda;
	@FXML
	private TableColumn clmnEstadoDeuda;
	@FXML
	private TableColumn clmnFechaDeuda;
	@FXML
	private Button btnFiltrarHD;
	@FXML
	private DatePicker dateFechaFiltroHD;
	@FXML
	private Tab tabGastos;
	@FXML
	private Tab tabIngresos;
	@FXML
	private Tab tabDeudaHist;
	@FXML
	private Tab tabSaldosAct;

	@FXML
	private RadioButton rdoSoloDeudasActivas;

	// Event Listener on TableView[#tblFondos].onMouseClicked
	@FXML
	public void seleccionTabla(MouseEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#btnCrearFondo].onAction
	@FXML
	public void pagarDeuda(ActionEvent event) {
		try {

			FXMLLoader carga = new FXMLLoader();
			carga.setLocation(getClass().getResource("AbonarADeuda.fxml"));
			Pane root = (Pane) carga.load();
			Scene escena = new Scene(root);
			Stage escenario = new Stage();
			escenario.setScene(escena);
			escenario.initStyle(StageStyle.UNDECORATED);
			escenario.initModality(Modality.APPLICATION_MODAL);

			escenario.setOnHidden(e -> {
				initialize(null, null);
			});

			escenario.show();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnCrearFondo].onAction
	@FXML
	public void crearFondo(ActionEvent event) {

		try {

			Pane root = (Pane) FXMLLoader.load(getClass().getResource("AgregarFondo.fxml"));
			Scene escena = new Scene(root);
			Stage escenario = new Stage();
			escenario.setScene(escena);
			escenario.initStyle(StageStyle.UNDECORATED);
			escenario.initModality(Modality.APPLICATION_MODAL);
			escenario.setOnHidden(e -> {
				initialize(null, null);
			});

			escenario.show();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	// Event Listener on Button[#btnDetalleFondo].onAction
	@FXML
	public void detalleFondo(ActionEvent event) {

		try {

			FXMLLoader carga = new FXMLLoader();
			carga.setLocation(getClass().getResource("DetalloFondo.fxml"));
			Pane root = (Pane) carga.load();
			Scene escena = new Scene(root);
			Stage escenario = new Stage();
			escenario.setScene(escena);
			escenario.initStyle(StageStyle.UNDECORATED);
			escenario.initModality(Modality.APPLICATION_MODAL);

			DetalloFondoController cntllr = (DetalloFondoController) carga.getController();
			cntllr.setFondo(fondoSeleccionado);

			escenario.show();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnEditarFondo].onAction
	@FXML
	public void editarFondo(ActionEvent event) {

		try {

			FXMLLoader carga = new FXMLLoader();
			carga.setLocation(getClass().getResource("EditarFondo.fxml"));
			Pane root = (Pane) carga.load();
			Scene escena = new Scene(root);
			Stage escenario = new Stage();
			escenario.setScene(escena);
			escenario.initStyle(StageStyle.UNDECORATED);
			escenario.initModality(Modality.APPLICATION_MODAL);

			EditarFondoController cntllr = (EditarFondoController) carga.getController();
			cntllr.setFondo(fondoSeleccionado);

			escenario.setOnHidden(e -> {
				initialize(null, null);
			});

			escenario.show();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnAnadirIngresoGnrl].onAction
	@FXML
	public void anadirIngresoGnrl(ActionEvent event) {
		try {

			FXMLLoader carga = new FXMLLoader();
			carga.setLocation(getClass().getResource("AgregarIngreso.fxml"));
			Pane root = (Pane) carga.load();
			Scene escena = new Scene(root);
			Stage escenario = new Stage();
			escenario.setScene(escena);
			escenario.initStyle(StageStyle.UNDECORATED);
			escenario.initModality(Modality.APPLICATION_MODAL);

			AgregarIngresoController cntllr = (AgregarIngresoController) carga.getController();
			cntllr.setPosibleFondo(fondoSeleccionado);

			escenario.setOnHidden(e -> {
				initialize(null, null);
			});

			escenario.show();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnRegistrarGastoGnrl].onAction
	@FXML
	public void registrarGastoGnrl(ActionEvent event) {
		try {

			FXMLLoader carga = new FXMLLoader();
			carga.setLocation(getClass().getResource("RegistrarGasto.fxml"));
			Pane root = (Pane) carga.load();
			Scene escena = new Scene(root);
			Stage escenario = new Stage();
			escenario.setScene(escena);
			escenario.initStyle(StageStyle.UNDECORATED);
			escenario.initModality(Modality.APPLICATION_MODAL);

			RegistrarGastoController cntrl = (RegistrarGastoController) carga.getController();
			cntrl.setPosibleFondo(fondoSeleccionado);
			escenario.setOnHidden(e -> {
				initialize(null, null);
			});

			escenario.show();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnAnadirIngreso].onAction
	@FXML
	public void anadirIngreso(ActionEvent event) {
		try {

			FXMLLoader carga = new FXMLLoader();
			carga.setLocation(getClass().getResource("AgregarIngreso.fxml"));
			Pane root = (Pane) carga.load();
			Scene escena = new Scene(root);
			Stage escenario = new Stage();
			escenario.setScene(escena);
			escenario.initStyle(StageStyle.UNDECORATED);
			escenario.initModality(Modality.APPLICATION_MODAL);

			escenario.setOnHidden(e -> {
				initialize(null, null);
			});

			escenario.show();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnFiltrarIngresos].onAction
	@FXML
	public void filtrarIngresos(ActionEvent event) {
		try {

			llenarTablaIngresos(dateInicioIngresos.getValue(), dateFinalingresos.getValue());

		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnRegistrarGasto].onAction
	@FXML
	public void registrarGasto(ActionEvent event) {
		try {

			FXMLLoader carga = new FXMLLoader();
			carga.setLocation(getClass().getResource("RegistrarGasto.fxml"));
			Pane root = (Pane) carga.load();
			Scene escena = new Scene(root);
			Stage escenario = new Stage();
			escenario.setScene(escena);
			escenario.initStyle(StageStyle.UNDECORATED);
			escenario.initModality(Modality.APPLICATION_MODAL);

			escenario.setOnHidden(e -> {
				initialize(null, null);
			});

			escenario.show();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnFiltrarGastos].onAction
	@FXML
	public void filtrarGastos(ActionEvent event) {
		// TODO Autogenerated
		try {
			llenarTablaGastos(dateInicioGastos.getValue(), dateFinGastos.getValue());
		} catch (ClassNotFoundException e) {
			// TODO: handle exception
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// Event Listener on Button[#btnBuscarSaldos].onAction
	@FXML
	public void buscarSaldos(ActionEvent event) {
		try {
			llenarTablaSaldos(dateFechaBusquedaSaldo.getValue(), LocalDate.now(), cmbSeleccDeuda.getValue());
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	// Event Listener on Button[#btnFiltrarHD].onAction
	@FXML
	public void iltrarHistoricoDeuda(ActionEvent event) {
		// TODO Autogenerated
		llenarTablaDeudas(dateFechaFiltroHD.getValue());
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		btnDetalleFondo.setDisable(true);
		btnEditarFondo.setDisable(true);
		try {
			Conexion cn = new Conexion();
			// Llenado de labels de General
			lblCapitalTotal.setText("$ " + cn.capitalTotal());
			lblDeudaTotal.setText("$ " + cn.deudaActiva());
			lblEstabilidad.setText("$ " + cn.estabilidad());

			// Llenado de la tabla Fondos General
			this.clmnNomFondo.setCellValueFactory(new PropertyValueFactory<>("nombre"));
			this.clmnMontoDeseado.setCellValueFactory(new PropertyValueFactory<>("montoDeseado"));
			this.clmnCapitalAct.setCellValueFactory(new PropertyValueFactory<>("capitalActual"));

			// Detectar la seleccion de un fondo en la tabla
			this.tblFondos.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Object>() {

				@Override
				public void changed(ObservableValue<? extends Object> arg0, Object arg1, Object arg2) {
					// TODO Auto-generated method stub
					fondoSeleccionado = (Fondos) arg2;
					if (arg2 != null) {
						btnEditarFondo.setDisable(false);
						btnDetalleFondo.setDisable(false);
					}
				}

			});
			// Dar los fondos a la tabla
			ArrayList<Fondos> fondos = cn.traerFondos();
			fondos.remove(0);
			this.tblFondos.setItems(FXCollections.observableArrayList(fondos));

			// Llenado de fechas en Ingresos

			LocalDate hoy = LocalDate.now();
			dateFinalingresos.setValue(hoy);
			dateInicioIngresos.setValue(hoy.minusMonths(1));

			// Llenado de fechas gastos
			dateFinGastos.setValue(hoy);
			dateInicioGastos.setValue(hoy.minusMonths(1));

			// Llenado de tabla en Ingresos
			this.clmnFechaIngreso.setCellValueFactory(new PropertyValueFactory<>("fecha"));
			this.clmnMontoIngreso.setCellValueFactory(new PropertyValueFactory<>("monto"));
			this.clmConceptoIngreso.setCellValueFactory(new PropertyValueFactory<>("concepto"));
			this.clmnFondoDestino.setCellValueFactory(new PropertyValueFactory<>("fondoDestinoLetra"));
			// Aqui se llenaran los labels tambien por comodidad de llamada de boton en
			// filtro
			llenarTablaIngresos(dateInicioIngresos.getValue(), dateFinalingresos.getValue());

			// Llenado de tabla gastos
			this.clmFechaGasto.setCellValueFactory(new PropertyValueFactory<>("fecha"));
			this.clmnMontoGasto.setCellValueFactory(new PropertyValueFactory<>("monto"));
			this.clmnConceptoGasto.setCellValueFactory(new PropertyValueFactory<>("concepto"));
			this.clmnClasificacion.setCellValueFactory(new PropertyValueFactory<>("clasificacion"));
			this.clmnFondoTomado.setCellValueFactory(new PropertyValueFactory<>("fondoTomadoLetra"));

			llenarTablaGastos(dateInicioGastos.getValue(), dateFinGastos.getValue());

			// Llenado de label y tabla de saldos

			lblSaldoTotalAct.setText("$ " + cn.saldoActivoTotal());

			clmnDeuda.setCellValueFactory(new PropertyValueFactory<>("conceptoGasto"));
			clmnFechaSaldo.setCellValueFactory(new PropertyValueFactory<>("fechaGasto"));
			clmnMontoPendiente.setCellValueFactory(new PropertyValueFactory<>("montoPendiente"));

			ArrayList<Saldos> saldos = cn.saldosActivos();
			tblSaldosActivos.setItems(FXCollections.observableArrayList(saldos));

			// Fecha de saldos
			dateFechaBusquedaSaldo.setValue(hoy);

			// Combobox gastos con deuda
			ArrayList<Gastos> gastosDeuda = cn.gastosDeDeuda();
			ObservableList<Gastos> listaVisible = FXCollections.observableArrayList();
			for (Gastos g : gastosDeuda) {
				listaVisible.add(g);
			}
			cmbSeleccDeuda.setItems(listaVisible);

			// Llenado de tabla Buscar saldos
			clmnFechaSaldoB.setCellValueFactory(new PropertyValueFactory<>("fechaDeuda"));
			clmnDeudaB.setCellValueFactory(new PropertyValueFactory<>("conceptoGasto"));
			clmnFondoPago.setCellValueFactory(new PropertyValueFactory<>("conceptoDeuda"));

			llenarTablaSaldos(hoy.minusMonths(1), hoy, null);

			//Llenado de fecha deudas
			dateFechaFiltroHD.setValue(hoy.minusMonths(1));
			// Llenado de tabla deudas
			clmConceptoDeuda.setCellValueFactory(new PropertyValueFactory<>("concepto"));
			clmnMontoDeuda.setCellValueFactory(new PropertyValueFactory<>("monto"));
			clmnEstadoDeuda.setCellValueFactory(new PropertyValueFactory<>("estado"));
			clmnFechaDeuda.setCellValueFactory(new PropertyValueFactory<>("fecha"));

			llenarTablaDeudas(hoy.minusMonths(1));

			// Cerrar conexion
			cn.cerrarConexion();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private void llenarTablaDeudas(LocalDate fecha) {
		// TODO Auto-generated method stub
		try {
			DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			String filtro = fecha.format(formato);
			Conexion cnn = new Conexion();
			ArrayList<Deudas> deudas = cnn.traerDeudas(filtro, (rdoSoloDeudasActivas.isSelected()) ? 1 : 0);
			this.tblHistoricoDeuda.setItems(FXCollections.observableArrayList(deudas));
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	private void llenarTablaSaldos(LocalDate fechaIni, LocalDate fechaFin, Gastos gasto)
			throws SQLException, ClassNotFoundException {
		DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		String ini = fechaIni.format(formato), fin = fechaFin.format(formato);
		Conexion cnn = new Conexion();
		ArrayList<Saldos> saldos = cnn.buscarSaldos(ini, fin, gasto);
		this.tblBusquedaSaldos.setItems(FXCollections.observableArrayList(saldos));

	}

	private void llenarTablaGastos(LocalDate fechaIni, LocalDate fechaFin) throws ClassNotFoundException, SQLException {
		DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		String ini = fechaIni.format(formato), fin = fechaFin.format(formato);
		Conexion cnn = new Conexion();
		ArrayList<Gastos> gastos = cnn.consultarGastos(ini, fin);
		ArrayList<Fondos> fondos = cnn.traerFondos();

		for (Gastos g : gastos) {
			Fondos f = fondos.get(g.getFondoTomado() - 1);
			g.setFondoTomadoLetra(f.getNombre());
		}
		this.tblGastos.setItems(FXCollections.observableArrayList(gastos));
		// Llenado de Labels de Gastos
		lblSumatoriaGastosNum.setText("$ " + cnn.gastosPeriodo(ini, fin));
		lblTitSumatoriaGts.setText("Gastos del periodo");
	}

	private void llenarTablaIngresos(LocalDate fechaIni, LocalDate fechaFin)
			throws ClassNotFoundException, SQLException {

		DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		String ini = fechaIni.format(formato), fin = fechaFin.format(formato);
		Conexion cnn = new Conexion();
		ArrayList<Ingresos> ingresos = cnn.consultarIngresos(ini, fin);
		ArrayList<Fondos> fondos = cnn.traerFondos();

		for (Ingresos i : ingresos) {
			Fondos f = fondos.get(i.getFondoDestino() - 1);
			i.setFondoDestinoLetra(f.getNombre());
		}
		this.tblIngresos.setItems(FXCollections.observableArrayList(ingresos));
		// Llenado de Labels de Ingresos
		lblSumatoriaIngresosNum.setText("$ " + cnn.ingresosPeriodo(ini, fin));
		lblTitSumatoriaIng.setText("Ingresos del periodo");

	}

}
